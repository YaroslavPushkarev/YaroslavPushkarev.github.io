(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _templateObject() {
  var data = _taggedTemplateLiteral([""]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

//1
var sum = 0;
var num1 = +prompt("first");
var num2 = +prompt("second");

for (var _i = num1; _i <= num2; _i++) {
  sum += _i;
}

alert(sum); //2

var x = prompt('first');
var y = prompt('second');

function gcd(x, y) {
  while (y !== 0) {
    y = x % (x = y);
  }

  return x;
}

alert('Наибольший общий делитель: ' + gcd(x, y)); //3

var number = prompt('Ведите число');
var i = 1;

while (i < number) {
  i++;

  if (i > 1 && i <= number && number % i === 0) {
    alert('Делитель числа: ' + i);
  }
} //4


var numberSum = prompt('Ведите число');
var quantity = 0;

for (var _i2 = 1; numberSum / _i2 >= 1; _i2 *= 10) {
  quantity++;
}

alert('Количество цифр в введенном числе: ' + quantity); //5

var num = [];

for (var _i3 = 1; _i3 <= 10; _i3++) {
  num[_i3] = prompt('Ведите число' + _i3);
}

var negativeNumbers = 0;
var positiveNumbers = 0;
var zero = 0;
var even = 0;
var odd = 0;

for (var _i4 = 0; _i4 < num.length; _i4++) {
  if (num[_i4] < 0) {
    negativeNumbers++;
  } else if (num[_i4] > 0) {
    positiveNumbers++;
  } else if (num[_i4] == 0) {
    zero++;
  }

  if (num[_i4] % 2 == 0) {
    even++;
  } else {
    odd++;
  }
}

alert('отрицательных ' + negativeNumbers + ',' + 'положительных: ' + positiveNumbers + ',' + 'нулей: ' + zero + ',' + 'нечетных: ' + odd + ',' + 'четных: ' + even); //6

while (true) {
  var calcFirst = +prompt('Enter first number', '');
  var calcSecond = +prompt('Enter second number', '');
  var calcSign = prompt('Enter sign', '');

  switch (calcSign) {
    case '+':
      alert(calcFirst + calcSecond);
      break;

    case '-':
      alert(calcFirst - calcSecond);
      break;

    case '/':
      alert(calcFirst / calcSecond);
      break;

    case '*':
      alert(calcFirst * calcSecond);
      break;

    default:
      alert('There are no such values');
  }

  var question = prompt('Want to continue?');

  if (question == null) {
    break;
  }
} //7


var count = prompt('Введите число', '');
var step = +prompt('На сколько сдвинуть', '0');
var arr = count.split('');

for (var _i5 = 0; _i5 < step; _i5++) {
  arr.push(arr.shift());
}

alert(arr.join(_templateObject())); //8

var days = ['Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота', 'Воскресенье'];

for (var _i6 = 0; _i6 < days.length; _i6++) {
  alert(days[_i6]);

  var _question = confirm('Want to continue?');

  if (_question == false) {
    break;
  }
} //9


for (var _i7 = 2; _i7 <= 9; _i7++) {
  for (var j = 1; j <= 10; j++) {
    document.write(_i7 + " * " + j + " = " + _i7 * j + "<br>");
  }

  document.write("<br>");
}

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
