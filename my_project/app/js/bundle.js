(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

$(document).ready(function () {
  $(".menu-icon").on("click", function () {
    $("nav ul").toggleClass("showing");
  });
});
$("body").vegas({
  delay: 4000,
  transition: 'zoomOut',
  slides: [{
    src: "./img/bg.jpg"
  }, {
    src: "./img/bg1.jpg"
  }, {
    src: "./img/bg2.jpg"
  }, {
    src: "./img/bg3.jpg"
  }],
  overlay: true,
  cover: true
});

document.body.onload = function () {
  setTimeout(function () {
    var preloader = document.getElementById('page-preloader');

    if (!preloader.classList.contains('done')) {
      preloader.classList.add('done');
    }
  }, 100);
}; //product


document.querySelector('button#sort-asc').onclick = function () {
  sortList('data-price');
};

document.querySelector('button#sort-desc').onclick = function () {
  sortListDesc('data-price');
};

document.querySelector('button#sort-rating').onclick = function () {
  sortListDesc('data-rating');
};

function sortList(sortType) {
  var items = document.querySelector('.goods-wrap');

  for (var i = 0; i < items.children.length - 1; i++) {
    for (var j = i; j < items.children.length; j++) {
      if (+items.children[i].getAttribute(sortType) > +items.children[j].getAttribute(sortType)) {
        console.log(1);
        var replacedNode = items.replaceChild(items.children[j], items.children[i]);
        insertAfter(replacedNode, items.children[i]);
      }
    }
  }
}

function sortListDesc(sortType) {
  var items = document.querySelector('.goods-wrap');

  for (var i = 0; i < items.children.length - 1; i++) {
    for (var j = i; j < items.children.length; j++) {
      if (+items.children[i].getAttribute(sortType) < +items.children[j].getAttribute(sortType)) {
        console.log(1);
        var replacedNode = items.replaceChild(items.children[j], items.children[i]);
        insertAfter(replacedNode, items.children[i]);
      }
    }
  }
}

function insertAfter(elem, refElem) {
  return refElem.parentNode.insertBefore(elem, refElem.nextSibling);
}

},{}]},{},[1])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
