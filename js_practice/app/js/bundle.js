(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Animal = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Animal =
/*#__PURE__*/
function () {
  function Animal(type, legs) {
    _classCallCheck(this, Animal);

    this.type = type;
    this.legs = legs;
  }

  _createClass(Animal, [{
    key: "metaData",
    get: function get() {
      return "Type: ".concat(this.type, " , legs: ").concat(this.legs);
    }
  }]);

  return Animal;
}();

exports.Animal = Animal;

},{}],2:[function(require,module,exports){
"use strict";

var _animal = require("./animal.js");

var cat = new _animal.Animal('cat', 4);
console.log(cat.metaData);
var apiUrl = 'https://jsonplaceholder.typicode.com/comments/1';

function getTop100Campers() {
  fetch(apiUrl).then(function (r) {
    return r.json();
  }).then(function (json) {
    console.log(json);
  })["catch"](function (error) {
    console.log('fail');
  });
}

getTop100Campers();

},{"./animal.js":1}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJwcm9qZWN0cy9qc19wcmFjdGljZS9zcmMvanMvYW5pbWFsLmpzIiwicHJvamVjdHMvanNfcHJhY3RpY2Uvc3JjL2pzL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7SUNBYSxNOzs7QUFDVCxrQkFBWSxJQUFaLEVBQWlCLElBQWpCLEVBQXNCO0FBQUE7O0FBQ2xCLFNBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0g7Ozs7d0JBRWE7QUFDViw2QkFBZ0IsS0FBSyxJQUFyQixzQkFBcUMsS0FBSyxJQUExQztBQUNIOzs7Ozs7Ozs7OztBQ1JMOztBQUVBLElBQUksR0FBRyxHQUFHLElBQUksY0FBSixDQUFXLEtBQVgsRUFBa0IsQ0FBbEIsQ0FBVjtBQUVBLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBRyxDQUFDLFFBQWhCO0FBRUEsSUFBTSxNQUFNLEdBQUcsaURBQWY7O0FBRUEsU0FBUyxnQkFBVCxHQUE0QjtBQUN4QixFQUFBLEtBQUssQ0FBQyxNQUFELENBQUwsQ0FDQyxJQURELENBQ00sVUFBQyxDQUFEO0FBQUEsV0FBTyxDQUFDLENBQUMsSUFBRixFQUFQO0FBQUEsR0FETixFQUVDLElBRkQsQ0FFTSxVQUFDLElBQUQsRUFBVTtBQUNaLElBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxJQUFaO0FBQ0gsR0FKRCxXQUlTLFVBQUMsS0FBRCxFQUFXO0FBQ1osSUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLE1BQVo7QUFDUCxHQU5EO0FBT0g7O0FBRUQsZ0JBQWdCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgY2xhc3MgQW5pbWFsIHtcclxuICAgIGNvbnN0cnVjdG9yKHR5cGUsbGVncyl7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmxlZ3MgPSBsZWdzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtZXRhRGF0YSgpe1xyXG4gICAgICAgIHJldHVybiBgVHlwZTogJHt0aGlzLnR5cGV9ICwgbGVnczogJHt0aGlzLmxlZ3N9YFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQW5pbWFsIH0gZnJvbSBcIi4vYW5pbWFsLmpzXCJcclxuXHJcbmxldCBjYXQgPSBuZXcgQW5pbWFsKCdjYXQnLCA0KTtcclxuXHJcbmNvbnNvbGUubG9nKGNhdC5tZXRhRGF0YSlcclxuXHJcbmNvbnN0IGFwaVVybCA9ICdodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vY29tbWVudHMvMSc7XHJcblxyXG5mdW5jdGlvbiBnZXRUb3AxMDBDYW1wZXJzKCkge1xyXG4gICAgZmV0Y2goYXBpVXJsKVxyXG4gICAgLnRoZW4oKHIpID0+IHIuanNvbigpKVxyXG4gICAgLnRoZW4oKGpzb24pID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhqc29uKVxyXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmYWlsJylcclxuICAgIH0pO1xyXG59XHJcblxyXG5nZXRUb3AxMDBDYW1wZXJzKCk7Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0p3Y205cVpXTjBjeTlxYzE5d2NtRmpkR2xqWlM5emNtTXZhbk12WVc1cGJXRnNMbXB6SWl3aWNISnZhbVZqZEhNdmFuTmZjSEpoWTNScFkyVXZjM0pqTDJwekwyRndjQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFUczdPenM3T3pzN096czdPenM3U1VOQllTeE5PenM3UVVGRFZDeHJRa0ZCV1N4SlFVRmFMRVZCUVdsQ0xFbEJRV3BDTEVWQlFYTkNPMEZCUVVFN08wRkJRMnhDTEZOQlFVc3NTVUZCVEN4SFFVRlpMRWxCUVZvN1FVRkRRU3hUUVVGTExFbEJRVXdzUjBGQldTeEpRVUZhTzBGQlEwZzdPenM3ZDBKQlJXRTdRVUZEVml3MlFrRkJaMElzUzBGQlN5eEpRVUZ5UWl4elFrRkJjVU1zUzBGQlN5eEpRVUV4UXp0QlFVTklPenM3T3pzN096czdPenRCUTFKTU96dEJRVVZCTEVsQlFVa3NSMEZCUnl4SFFVRkhMRWxCUVVrc1kwRkJTaXhEUVVGWExFdEJRVmdzUlVGQmEwSXNRMEZCYkVJc1EwRkJWanRCUVVWQkxFOUJRVThzUTBGQlF5eEhRVUZTTEVOQlFWa3NSMEZCUnl4RFFVRkRMRkZCUVdoQ08wRkJSVUVzU1VGQlRTeE5RVUZOTEVkQlFVY3NhVVJCUVdZN08wRkJSVUVzVTBGQlV5eG5Ra0ZCVkN4SFFVRTBRanRCUVVONFFpeEZRVUZCTEV0QlFVc3NRMEZCUXl4TlFVRkVMRU5CUVV3c1EwRkRReXhKUVVSRUxFTkJRMDBzVlVGQlF5eERRVUZFTzBGQlFVRXNWMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJSaXhGUVVGUU8wRkJRVUVzUjBGRVRpeEZRVVZETEVsQlJrUXNRMEZGVFN4VlFVRkRMRWxCUVVRc1JVRkJWVHRCUVVOYUxFbEJRVUVzVDBGQlR5eERRVUZETEVkQlFWSXNRMEZCV1N4SlFVRmFPMEZCUTBnc1IwRktSQ3hYUVVsVExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlExb3NTVUZCUVN4UFFVRlBMRU5CUVVNc1IwRkJVaXhEUVVGWkxFMUJRVm83UVVGRFVDeEhRVTVFTzBGQlQwZzdPMEZCUlVRc1owSkJRV2RDSWl3aVptbHNaU0k2SW1kbGJtVnlZWFJsWkM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJ5S0dVc2JpeDBLWHRtZFc1amRHbHZiaUJ2S0drc1ppbDdhV1lvSVc1YmFWMHBlMmxtS0NGbFcybGRLWHQyWVhJZ1l6MWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJ5WlhGMWFYSmxKaVp5WlhGMWFYSmxPMmxtS0NGbUppWmpLWEpsZEhWeWJpQmpLR2tzSVRBcE8ybG1LSFVwY21WMGRYSnVJSFVvYVN3aE1DazdkbUZ5SUdFOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0cEsxd2lKMXdpS1R0MGFISnZkeUJoTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWVgxMllYSWdjRDF1VzJsZFBYdGxlSEJ2Y25Sek9udDlmVHRsVzJsZFd6QmRMbU5oYkd3b2NDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtISXBlM1poY2lCdVBXVmJhVjFiTVYxYmNsMDdjbVYwZFhKdUlHOG9ibng4Y2lsOUxIQXNjQzVsZUhCdmNuUnpMSElzWlN4dUxIUXBmWEpsZEhWeWJpQnVXMmxkTG1WNGNHOXlkSE45Wm05eUtIWmhjaUIxUFZ3aVpuVnVZM1JwYjI1Y0lqMDlkSGx3Wlc5bUlISmxjWFZwY21VbUpuSmxjWFZwY21Vc2FUMHdPMms4ZEM1c1pXNW5kR2c3YVNzcktXOG9kRnRwWFNrN2NtVjBkWEp1SUc5OWNtVjBkWEp1SUhKOUtTZ3BJaXdpWlhod2IzSjBJR05zWVhOeklFRnVhVzFoYkNCN1hISmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDBlWEJsTEd4bFozTXBlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlIUjVjR1U3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVzWldkeklEMGdiR1ZuY3p0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQm5aWFFnYldWMFlVUmhkR0VvS1h0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lGUjVjR1U2SUNSN2RHaHBjeTUwZVhCbGZTQXNJR3hsWjNNNklDUjdkR2hwY3k1c1pXZHpmV0JjY2x4dUlDQWdJSDFjY2x4dWZTSXNJbWx0Y0c5eWRDQjdJRUZ1YVcxaGJDQjlJR1p5YjIwZ1hDSXVMMkZ1YVcxaGJDNXFjMXdpWEhKY2JseHlYRzVzWlhRZ1kyRjBJRDBnYm1WM0lFRnVhVzFoYkNnblkyRjBKeXdnTkNrN1hISmNibHh5WEc1amIyNXpiMnhsTG14dlp5aGpZWFF1YldWMFlVUmhkR0VwWEhKY2JseHlYRzVqYjI1emRDQmhjR2xWY213Z1BTQW5hSFIwY0hNNkx5OXFjMjl1Y0d4aFkyVm9iMnhrWlhJdWRIbHdhV052WkdVdVkyOXRMMk52YlcxbGJuUnpMekVuTzF4eVhHNWNjbHh1Wm5WdVkzUnBiMjRnWjJWMFZHOXdNVEF3UTJGdGNHVnljeWdwSUh0Y2NseHVJQ0FnSUdabGRHTm9LR0Z3YVZWeWJDbGNjbHh1SUNBZ0lDNTBhR1Z1S0NoeUtTQTlQaUJ5TG1wemIyNG9LU2xjY2x4dUlDQWdJQzUwYUdWdUtDaHFjMjl1S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb2FuTnZiaWxjY2x4dUlDQWdJSDBwTG1OaGRHTm9LQ2hsY25KdmNpa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblptRnBiQ2NwWEhKY2JpQWdJQ0I5S1R0Y2NseHVmVnh5WEc1Y2NseHVaMlYwVkc5d01UQXdRMkZ0Y0dWeWN5Z3BPeUpkZlE9PSJ9
